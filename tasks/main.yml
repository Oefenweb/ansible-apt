# tasks file
---
- name: manage sources.list
  when: apt_manage_sources_list | bool
  tags:
    - configuration
    - apt
    - apt-configuration
  block:
    - name: install dependencies (pre)
      ansible.builtin.apt:
        name: "{{ apt_dependencies_pre }}"
        state: "{{ apt_install_state | default('latest') }}"
        update_cache: true
        cache_valid_time: "{{ apt_update_cache_valid_time | default(3600) }}"

    - name: update configuration file - /etc/apt/sources.list
      ansible.builtin.template:
        src: "{{ apt_sources_list_file.lstrip('/') }}.{{ ansible_distribution }}.j2"
        dest: "{{ apt_sources_list_file }}"
        owner: root
        group: root
        mode: 0644
      register: _update_config_1

    - name: update configuration file - /etc/apt/sources.list.d/ubuntu.sources
      ansible.builtin.template:
        src: "{{ apt_ubuntu_sources_file.lstrip('/') }}.j2"
        dest: "{{ apt_ubuntu_sources_file }}"
        owner: root
        group: root
        mode: 0644
      register: _update_config_2
      when:
        - ansible_distribution == 'Ubuntu'
        - ansible_distribution_major_version is version('24', '>=')

- name: update configuration file - /etc/apt/apt.conf
  ansible.builtin.template:
    src: "{{ apt_apt_conf_file.lstrip('/') }}.j2"
    dest: "{{ apt_apt_conf_file }}"
    owner: root
    group: root
    mode: 0644
  register: _update_config_3
  tags:
    - configuration
    - apt
    - apt-configuration

- name: remove configuration files - /etc/apt/apt.conf.d/*
  ansible.builtin.file:
    path: "/etc/apt/apt.conf.d/{{ item }}"
    state: absent
  with_items: "{{ apt_etc_apt_apt_conf_d_files_absent }}"
  register: _update_config_4
  tags:
    - configuration
    - apt
    - apt-configuration

- name: ensure directory exists - /var/lib/apt/lists/
  ansible.builtin.file:
    path: /var/lib/apt/lists/
    state: directory
    owner: root
    group: root
    mode: 0755
  tags:
    - configuration
    - apt
    - apt-update

- name: update
  when: apt_update | bool
  tags:
    - configuration
    - apt
    - apt-update
  block:
    - name: update | on configuration change
      ansible.builtin.apt:
        update_cache: true
      when: false
            or (_update_config_1 is defined and (_update_config_1.changed))
            or (_update_config_2 is defined and (_update_config_2.changed))
            or (_update_config_3 is defined and (_update_config_3.changed))
            or (_update_config_4 is defined and (_update_config_4.changed))

    - name: update | on cache invalidation
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: "{{ apt_update_cache_valid_time }}"

- name: dpkg --configure  # noqa command-instead-of-module
  ansible.builtin.command: >
    dpkg --configure -a
  changed_when: _dpkg_configure.stdout_lines | length > 0
  register: _dpkg_configure
  when: apt_dpkg_configure | bool
  tags:
    - configuration
    - apt
    - apt-dpkg-configure

- name: install dependencies  # noqa args[module]
  ansible.builtin.apt:
    name: "{{ apt_dependencies }}"
    state: "{{ apt_install_state }}"
  tags:
    - configuration
    - apt
    - apt-dependencies

- name: upgrade  # noqa args[module]
  ansible.builtin.apt:
    upgrade: "{{ apt_upgrade_type }}"
    update_cache: true
    dpkg_options: "{{ apt_upgrade_dpkg_options | join(',') }}"
  when: apt_upgrade | bool
  tags:
    - configuration
    - apt
    - apt-upgrade

- name: clean  # noqa command-instead-of-module
  ansible.builtin.command: >
    apt-get -y clean
  changed_when: false
  when: apt_clean | bool
  tags:
    - configuration
    - apt
    - apt-clean

- name: install  # noqa args[module]
  ansible.builtin.apt:
    name: "{{ apt_install }}"
    state: "{{ apt_install_state }}"
  tags:
    - configuration
    - apt
    - apt-install

- name: remove  # noqa args[module]
  ansible.builtin.apt:
    name: "{{ apt_remove }}"
    state: absent
    purge: "{{ apt_remove_purge }}"
  tags:
    - configuration
    - apt
    - apt-remove

- name: autoremove  # noqa args[module]
  ansible.builtin.apt:
    autoremove: true
    dpkg_options: "{{ apt_upgrade_dpkg_options | join(',') }}"
  when: apt_autoremove | bool
  tags:
    - configuration
    - apt
    - apt-autoremove
